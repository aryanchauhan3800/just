import React, { useState } from "react";
import DateRangePicker from "../DatePicker";
import { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { HiOutlineBanknotes } from "react-icons/hi2";
import { RiMoneyRupeeCircleLine } from "react-icons/ri";
import { LuBadgePercent, LuBox, LuCircleAlert } from "react-icons/lu";
import { BsCaretDownFill } from "react-icons/bs";
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "@/components/ui/hover-card"
import { useGetDashboardAttributes } from "@/hooks/useDashboard";
import SkeletonCard from "../SkeletonCard";
import { startOfMonth, endOfMonth, startOfWeek, endOfWeek } from "date-fns";

const DashboardInfoStrip = ({ startDate, endDate, setStartDate, setEndDate }) => {
  const [activeTab, setActiveTab] = useState("year");
  const [showCustomPicker, setShowCustomPicker] = useState(false);

  const handleTabChange = (value) => {
    setActiveTab(value);
    setShowCustomPicker(false);

    const now = new Date();
    let newStart: Date, newEnd: Date;

    switch (value) {
      case "year":
        newStart = new Date(now.getMonth() < 3 ? now.getFullYear() - 1 : now.getFullYear(), 3, 1); // Apr 1st
        newEnd = new Date(now.getMonth() < 3 ? now.getFullYear() : now.getFullYear() + 1, 2, 31); // Mar 31st
        break;
      case "month":
        newStart = startOfMonth(now);
        newEnd = endOfMonth(now);
        break;
      case "week":
        newStart = startOfWeek(now, { weekStartsOn: 1 }); // Monday as start of week
        newEnd = endOfWeek(now, { weekStartsOn: 1 });
        break;
      case "custom":
        setShowCustomPicker(true);
        return;
      default:
        return;
    }

    setStartDate(newStart);
    setEndDate(newEnd);
  };
  const { data: dashboardData, isLoading } = useGetDashboardAttributes({ startDate, endDate })
  const items = [
    {
      title: "Revenue",
      icon: HiOutlineBanknotes,
      color: "border-l-green-500",
      info: "Total revenu generated by business",
      value: dashboardData?.attributes?.totalRevenue?.value,
      change: dashboardData?.attributes?.totalRevenue?.change,
      percentage: dashboardData?.attributes?.totalRevenue?.percentage,
      isUpwardTrend: dashboardData?.attributes?.totalRevenue?.change >= 0 ? true : false,
      isDownwardTrend: dashboardData?.attributes?.totalRevenue?.change < 0 ? true : false
    },
    {
      title: "Profit",
      icon: RiMoneyRupeeCircleLine,
      color: "border-l-yellow-500",
      info: "Total Profit from revenue",
      value: dashboardData?.attributes?.profit?.value,
      change: dashboardData?.attributes?.profit?.change,
      percentage: dashboardData?.attributes?.profit?.percentage,
      isUpwardTrend: dashboardData?.attributes?.profit?.change >= 0 ? true : false,
      isDownwardTrend: dashboardData?.attributes?.profit?.change < 0 ? true : false
    },
    {
      title: "Stock value",
      icon: LuBox,
      color: "border-l-purple-500",
      info: "Total Items present in the inventory",
      value: dashboardData?.attributes?.stockValue?.value,
      change: dashboardData?.attributes?.stockValue?.change,
      percentage: dashboardData?.attributes?.stockValue?.percentage,
      isUpwardTrend: dashboardData?.attributes?.stockValue?.change >= 0 ? true : false,
      isDownwardTrend: dashboardData?.attributes?.stockValue?.change < 0 ? true : false
    },
    {
      title: "Sales value",
      icon: LuBadgePercent,
      color: "border-l-red-500",
      info: "Total sales done by business",
      value: dashboardData?.attributes?.salesValue?.value,
      change: dashboardData?.attributes?.salesValue?.change,
      percentage: dashboardData?.attributes?.salesValue?.percentage,
      isUpwardTrend: dashboardData?.attributes?.salesValue?.change >= 0 ? true : false,
      isDownwardTrend: dashboardData?.attributes?.salesValue?.change < 0 ? true : false
    },
  ];

  const [upward] = useState(true)

  const [dateRange, setDateRange] = useState<{
    startDate: Date | null;
    endDate: Date | null;
  }>({
    startDate: null,
    endDate: null
  });

  const handleDateRangeChange = (range: {
    startDate: Date | null;
    endDate: Date | null;
  }) => {
    setDateRange(range);
    console.log('Selected date range:', dateRange);
  };

  return (
    <>
      <div className="flex flex-row justify-between">
        <div>
          <h1 className="text-lg">üëãüèª Hi Abhishek</h1>
          <p className="text-sm text-[#6B6B6B]">
            Here&apos;s a glimpse of your Business
          </p>
        </div>
        <div className="flex flex-row items-center gap-4">
          <Tabs value={activeTab} onValueChange={handleTabChange}>
            <TabsList className="gap-2 bg-gray-50">
              <TabsTrigger value="year">This Year</TabsTrigger>
              <TabsTrigger value="month">This Month</TabsTrigger>
              <TabsTrigger value="week">This Week</TabsTrigger>
              {/* <TabsTrigger value="custom">Custom</TabsTrigger> */}
            </TabsList>
          </Tabs>
          { (
            <DateRangePicker
              onRangeChange={({ startDate, endDate }) => {
                setStartDate(startDate);
                setEndDate(endDate);
              }}
            />
          )}
        </div>
      </div>
      <div className="w-full flex flex-row mt-4 gap-4">
        {
          isLoading && Array.from({ length: 4 }).map((_, i) => <SkeletonCard key={i} />)
        }
        {!isLoading && items.map((item) => {
          const Icon = item.icon;

          return (
            <div key={item.title} className="w-full bg-white p-1">
              <div className={`flex flex-col border-l-3 pl-2 ${item.color}`}>

                <div className="flex flex-row justify-between pr-4">
                  <div className="flex flex-row items-center gap-1">
                    <span>
                      <Icon className="w-4 h-4 text-gray-500" />
                    </span>
                    <span>{item.title}</span>
                  </div>

                  <div className={`flex items-center ${upward ? 'text-red-500' : 'text-green-500'}`}>
                    <BsCaretDownFill />
                    {item?.percentage}%
                  </div>
                </div>
                <span className="text-gray-500">All</span>
              </div>

              <div className="flex flex-row justify-between items-center px-4 text-gray-500 mt-2">
                <span className="text-xl text-[#242424p]">‚Çπ {item?.value}</span>
                <HoverCard>
                  <HoverCardTrigger><span><LuCircleAlert className="w-4 h-4" /></span></HoverCardTrigger>
                  <HoverCardContent>
                    {item.info}
                  </HoverCardContent>
                </HoverCard>
              </div>
            </div>
          )
        })}
      </div>
    </>
  );
};

export default DashboardInfoStrip;